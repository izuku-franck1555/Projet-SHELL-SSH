fichier_config="/etc/ssh/sshd_config"

#fonctions utilitaire
#fonction servant a avance dans le program en fonction du choix de l'utilisateur
function continuer_annuler(){
    echo -e " ________________________________________________________________________________\n"
    echo -e "Entrez 1 pour continuer vers l'etape suivante et 2 pour Annuler\n"
    options=(Continuer Annuler)
    select choix in ${options[@]}
    do
        case $REPLY in 
            1)
            $1;break;;
            2)
            $2;break;;
            *)
            echo "cette option n'est pas geree dans ce menu";;
        esac
    done
}

#function modifiant le fichier de configuration /etc/ssh/sshd_config
#modification de lauthentification par mots de passe

function accepter_passAuth(){
    case $1 in
        non)
            sudo sed -i s/"^PasswordAuthentication [a-z -]*"/"PasswordAuthentication no"/ $fichier_config; 
            sudo sed -i s/"^#PasswordAuthentication [a-z -]*"/"PasswordAuthentication no"/ $fichier_config;;
        oui) 
            sudo sed -i s/"^PasswordAuthentication [a-z -]*"/"PasswordAuthentication yes"/ $fichier_config;
            sudo sed -i s/"^#PasswordAuthentication [a-z -]*"/"PasswordAuthentication yes"/ $fichier_config;;
    esac
}

function accepter_cleAuth(){
    case $1 in
        non)
            sudo sed -i s/"^PubkeyAuthentication [a-z -]*"/"PubkeyAuthentication no"/ $fichier_config; 
            sudo sed -i s/"^#PubkeyAuthentication [a-z -]*"/"PubkeyAuthentication no"/ $fichier_config;;
        oui) 
            sudo sed -i s/"^PubkeyAuthentication [a-z -]*"/"PubkeyAuthentication yes"/ $fichier_config;
            sudo sed -i s/"^#PubkeyAuthentication [a-z -]*"/"PubkeyAuthentication yes"/ $fichier_config;;
    esac
}

function accepter_Auth(){
    case $1 in
        non)
            accepter_cleAuth non
            accepter_passAuth non;;
        oui) 
            accepter_cleAuth oui
            accepter_passAuth oui;;
    esac
}
#gestion des connection en root
function accepter_connection_root(){
    case $1 in
        non) 
            sudo sed -i s/"^PermitRootLogin [a-z -]*"/"PermitRootLogin no"/ $fichier_config;
            sudo sed -i s/"^#PermitRootLogin [a-z -]*"/"PermitRootLogin no"/ $fichier_config;;
        oui) 
            sudo sed -i s/"^PermitRootLogin [a-z -]*"/"PermitRootLogin yes"/ $fichier_config;
            sudo sed -i s/"^#PermitRootLogin [a-z -]*"/"PermitRootLogin yes"/ $fichier_config;;
    esac
}

function oui_non_root(){
    echo -e " ________________________________________________________________________________\n"
    echo -e "Entrez 1 pour pour accepter et 2 pour refuser\n"
    options=(Accepter Refuser)
    select choix in ${options[@]}
    do
        case $REPLY in 
            1)
            accepter_connection_root oui; $1 ;break;;
            2)
            accepter_connection_root non; $1 ;break;;
            *)
            echo "cette option n'est pas geree dans ce menu";;
        esac
    done   
}

function oui_non_pass(){
    echo -e " ________________________________________________________________________________\n"
    echo -e "Entrez 1 pour pour accepter et 2 pour refuser\n"
    options=(Accepter Refuser)
    select choix in ${options[@]}
    do
        case $REPLY in 
            1)
            accepter_passAuth oui; $1 ;break;;
            2)
            accepter_passAuth non; $1 ;break;;
            *)
            echo "cette option n'est pas geree dans ce menu";;
        esac
    done   
}

#function installant openssh-server
function installer_ssh(){
    sudo apt autoremove openssh-client
    sudo apt install openssh-server
    continuer_annuler gerer_passe mode_serveur
}

#fonction recuperant un numero de port entre par l'utilisateur
function operer_changement_port(){
    echo -ne "Entrez le numero du port que vous voulez utilisez :"
    read np
    until [[ $np = +([0-9]) ]]
        do 
            echo "vous n'avez pas entrez un nombre !!!"
            echo -ne "ressaisissez le numero du port que vous voulez utilisez :"
	        read np
        done
	case $np in
		[0-9]*) 
			case $np in
				0) echo "Port null !!";;
				*) 
					old=`grep "^#Port" $fichier_config`
                    old2=`grep "^Port" $fichier_config`
					test old=''&& echo "ancien : $old2"||echo "ancien : $old2"
					echo -e "Nouveau : Port $np \n"
                    sudo sed -i s/"^Port [0-9]*"/"Port $np"/ $fichier_config
					sudo sed -i s/"^#Port [0-9]*"/"Port $np"/ $fichier_config
				;;
			esac
		;;
		*);;

	esac
}

aller_au_menuprinc(){
    echo -e " ________________________________________________________________________________\n"
    echo -e "Entrez 1 pour revenir au menu principal\n"
    options=(revinir_au_menu_principale)
    select choix in ${options[@]}
    do
        case $REPLY in 
            1)
            menu_princ;;
            *)
            echo "cette option n'est pas geree dans ce menu";;
        esac
    done   
}

function fin_config(){
    resize -s 21 83
    clear
    echo -e    "|*********************************************************************************|"
    echo -e    "|                                                                                 |"
    echo -e    "|\t\t\t\t  FIN CONFIG   \t \t \t \t\t  |"
	echo -e    "|                                                                                 |"
	echo -e    "|*********************************************************************************|"
    echo -e "\n"
    echo -e "\n\n\n\n\t\t VOTRE SERVEUR SSH A ETE CONFIGURER AVEC SUCCES :) \n\n\n\n";
    aller_au_menuprinc    
}

function interdire_con_graph(){
    resize -s 21 83
    clear
    echo -e    "|*********************************************************************************|"
    echo -e    "|                                                                                 |"
    echo -e    "|\t\t\t\t GERER L'OPTION GRAPHIQUE \t\t\t\t|"
	echo -e    "|                                                                                 |"
	echo -e    "|*********************************************************************************|"
    echo -e "\n"
    echo -e "Desirez vous interdire aux clients de lancer des applications"
    echo -e "\ngraphiques sur votre serveur?(oui/non)"
    read rep
    case $rep in 
        oui|o|O)
            sudo sed -i s/"^X11Forwarding [a-z]*"/"X11Forwarding no"/ $fichier_config;
            sudo sed -i s/"^#X11Forwarding [a-z]*"/"X11Forwarding no"/ $fichier_config
            echo -e "\noption validee\n";;
        non|n|N) 
            sudo sed -i s/"^X11Forwarding [a-z]*"/"X11Forwarding yes"/ $fichier_config;
            sudo sed -i s/"^#X11Forwarding [a-z]*"/"X11Forwarding yes"/ $fichier_config
            echo -e "\noption validee\n";;
        *)
            echo -e "vous devez repondre par oui ou par non";;
        esac
    continuer_annuler fin_config menu_princ 
}


#fonction pour modifier le port
function changer_port(){
    resize -s 21 83
    clear
    echo -e    "|*********************************************************************************|"
    echo -e    "|                                                                                 |"
    echo -e    "|\t\t\tCHANGER LE PORT DE SSH   \t  \t \t \t  |"
	echo -e    "|                                                                                 |"
	echo -e    "|*********************************************************************************|"
    echo -e "\n"
    echo -ne "Desirez vous modifier le port par defaut de ssh ? (oui/non)"
    read reponse
    case $reponse in
        oui)
            operer_changement_port; continuer_annuler interdire_con_graph menu_princ ;;
        o|O)
            operer_changement_port; continuer_annuler interdire_con_graph menu_princ ;;
        non)
            continuer_annuler interdire_con_graph menu_princ ;;
        n|N)
            continuer_annuler interdire_con_graph menu_princ ;;
        *)
            echo -e "vous devez repondre par oui/non ou o/n";;
    esac
} 

#fonction menu gerant les connections en root
function connection_root(){
    resize -s 21 83
    clear
    echo -e    "|*********************************************************************************|"
    echo -e    "|                                                                                 |"
    echo -e    "|\t\t\tCONNECTION EN SUPER-UTILISATEUR   \t \t \t \t|"
	echo -e    "|                                                                                 |"
	echo -e    "|*********************************************************************************|"
    echo -e "\n"
    message="\tIci nous vous permettons d'autoriser ou de proscrire les connections\n
    \ten super utilisateur d'un client sur votre serveur.\n 
    \tNous vous recommendons de refuser ce genre de connection car\n
    \tpouvant conduire a des degats irreverssibles.\n"
    echo -e $message
    oui_non_root changer_port
}

#fonction gerant la question d'acceptation ou de refus d'authentification par mot de pass
function gerer_passe(){
    resize -s 21 83
    clear
    echo -e    "|*********************************************************************************|"
    echo -e    "|                                                                                 |"
    echo -e    "|\t \t \t  MODE D'AUTHENTIFICATION   \t  \t \t \t  |"
	echo -e    "|                                                                                 |"
	echo -e    "|*********************************************************************************|"
    echo -e "\n"
    message="choississez le mode deconnection de vos clients .Nous vous conseillons de choisir\nl'option 3 si vous voulez que le client puisse se connecter de n'importe quel \nmachine differente de celle avec la quelle il a creer ses cles\n"
    local option1=`echo -e "authentification_par_mot_de_passe_seulement"`
    local option2=`echo -e "authentification_par_cles_seulement"`
    local option3=`echo -e "utiliser_les_deux_modes_precedent_a_la_fois"`
    echo -e $message
    select choix in $option1 $option2 $option3
    do
        case $REPLY in
            1)accepter_passAuth oui; echo -e "option validee\n";break;;
            2)accepter_cleAuth oui; echo -e "option validee\n";break;;
            3)accepter_Auth oui; echo -e "option validee\n" ;break;;
            *)echo "choix non gerer";;
        esac
    done
    continuer_annuler connection_root menu_princ 
}

#fonction verifiant la presence des paquets essentiels ou les installant
function installation(){
    resize -s 16 83
    clear
    echo -e    "|*********************************************************************************|"
    echo -e    "|                                                                                 |"
    echo -e    "|\t \t \t       INSTALLATION    \t  \t \t \t\t  |"
	echo -e    "|                                                                                 |"
	echo -e    "|*********************************************************************************|"
    echo -e "\n"
    
    dpkg -l ssh >paquets 2>erreurs.log
    statut=$? #recuperation du statut d'execution de la commande precedente
    msg_installation="\tVous n'avez malheureusement pas les paquets necessaires\n
    \tvous aurez besoin de connection internet.\n
    \tpour continuer entrez 1 pour continuer";
    msg_confirmation="\tVous disposez deja de tous les paquets necessaires.\n
     \tvous pouvez continuer avec la configuration de votre serveur";

    if [ $statut -eq 0 ]
     then 
        echo -e $msg_confirmation
        continuer_annuler gerer_passe menu_princ 
    else
        echo -e $msg_installation
        continuer_annuler installer_ssh menu_princ  
    fi
}